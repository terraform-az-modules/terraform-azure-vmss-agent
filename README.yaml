---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: Terraform Azure VMSS Agent

# License of this project
license: "APACHE"

# Canonical GitHub repo (update with your actual repo if different)
github_repo: terraform-az-modules/terraform-azure-vmss-agent

# Badges to display
badges:
  - name: "Terraform"
    image: "https://img.shields.io/badge/Terraform-v0.13-green"
    url: "https://www.terraform.io"
  - name: "Licence"
    image: "https://img.shields.io/badge/License-APACHE-blue.svg"
    url: "LICENSE.md"
  - name: "Changelog"
    image: "https://img.shields.io/badge/Changelog-blue"
    url: "CHANGELOG.md"

# Prerequesties to display
prerequesties:
  - name: Terraform
    url: https://learn.hashicorp.com/terraform/getting-started/install.html
    version: ">= 1.6.6"

providers:
  - name: azure
    url: https://azure.microsoft.com/
    version: ">= 3.116.0"

#  description of this project
description: |-
  Terraform module to deploy a Linux Virtual Machine Scale Set (VMSS) in Azure.
  This module supports user-defined images and uses cloud-init to install tools like Docker, Terraform, Helm, kubectl, and Azure CLI.

# How to use this project
usage: |-
  Here are some examples of how you can use this module in your inventory structure:
  ```hcl
  module "vmss_agent" {
    source               = "terraform-az-modules/vmss-agent/azure"
    resource_group_name  = "rg-dev"
    location             = "centralus"
    name                 = "core"
    environment          = "dev"
    label_order          = ["name", "environment", "location"]
    admin_username       = "ubuntu"
    computer_name_prefix = "vmss-agent"
    vms_size             = "Standard_E2s_v3"
    subnet_id            = "/subscriptions/xxx/resourceGroups/rg-dev/providers/Microsoft.Network/virtualNetworks/vnet1/subnets/subnet1"
    ssh_public_key       = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQD..."
    source_image_reference = {
      publisher = "Canonical"
      offer     = "0001-com-ubuntu-server-jammy"
      sku       = "22_04-lts"
      version   = "latest"
      custom_data = base64encode(<<EOF
  #cloud-config
  packages:
    - docker.io
    - unzip
  EOF
      )
    }
  }
   ```